/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 48500.0, "series": [{"data": [[0.0, 10.0], [0.1, 24.0], [0.2, 30.0], [0.3, 40.0], [0.4, 40.0], [0.5, 46.0], [0.6, 47.0], [0.7, 48.0], [0.8, 49.0], [0.9, 51.0], [1.0, 54.0], [1.1, 56.0], [1.2, 59.0], [1.3, 61.0], [1.4, 65.0], [1.5, 68.0], [1.6, 70.0], [1.7, 70.0], [1.8, 74.0], [1.9, 76.0], [2.0, 76.0], [2.1, 79.0], [2.2, 80.0], [2.3, 81.0], [2.4, 83.0], [2.5, 85.0], [2.6, 89.0], [2.7, 91.0], [2.8, 95.0], [2.9, 97.0], [3.0, 99.0], [3.1, 101.0], [3.2, 105.0], [3.3, 106.0], [3.4, 108.0], [3.5, 112.0], [3.6, 115.0], [3.7, 117.0], [3.8, 119.0], [3.9, 120.0], [4.0, 121.0], [4.1, 121.0], [4.2, 123.0], [4.3, 125.0], [4.4, 126.0], [4.5, 128.0], [4.6, 130.0], [4.7, 132.0], [4.8, 133.0], [4.9, 136.0], [5.0, 140.0], [5.1, 144.0], [5.2, 147.0], [5.3, 149.0], [5.4, 153.0], [5.5, 156.0], [5.6, 157.0], [5.7, 158.0], [5.8, 159.0], [5.9, 161.0], [6.0, 162.0], [6.1, 164.0], [6.2, 165.0], [6.3, 167.0], [6.4, 170.0], [6.5, 171.0], [6.6, 173.0], [6.7, 174.0], [6.8, 176.0], [6.9, 180.0], [7.0, 182.0], [7.1, 185.0], [7.2, 186.0], [7.3, 191.0], [7.4, 192.0], [7.5, 195.0], [7.6, 195.0], [7.7, 199.0], [7.8, 202.0], [7.9, 204.0], [8.0, 205.0], [8.1, 207.0], [8.2, 208.0], [8.3, 210.0], [8.4, 217.0], [8.5, 217.0], [8.6, 221.0], [8.7, 229.0], [8.8, 234.0], [8.9, 239.0], [9.0, 243.0], [9.1, 245.0], [9.2, 248.0], [9.3, 252.0], [9.4, 257.0], [9.5, 261.0], [9.6, 264.0], [9.7, 272.0], [9.8, 284.0], [9.9, 288.0], [10.0, 291.0], [10.1, 293.0], [10.2, 299.0], [10.3, 306.0], [10.4, 309.0], [10.5, 316.0], [10.6, 318.0], [10.7, 339.0], [10.8, 345.0], [10.9, 353.0], [11.0, 363.0], [11.1, 376.0], [11.2, 392.0], [11.3, 403.0], [11.4, 414.0], [11.5, 432.0], [11.6, 453.0], [11.7, 467.0], [11.8, 512.0], [11.9, 544.0], [12.0, 550.0], [12.1, 567.0], [12.2, 594.0], [12.3, 630.0], [12.4, 666.0], [12.5, 687.0], [12.6, 688.0], [12.7, 694.0], [12.8, 698.0], [12.9, 703.0], [13.0, 717.0], [13.1, 768.0], [13.2, 803.0], [13.3, 842.0], [13.4, 878.0], [13.5, 913.0], [13.6, 945.0], [13.7, 1063.0], [13.8, 1110.0], [13.9, 1152.0], [14.0, 1168.0], [14.1, 1232.0], [14.2, 1255.0], [14.3, 1285.0], [14.4, 1298.0], [14.5, 1301.0], [14.6, 1303.0], [14.7, 1379.0], [14.8, 1460.0], [14.9, 1472.0], [15.0, 1495.0], [15.1, 1534.0], [15.2, 1627.0], [15.3, 1652.0], [15.4, 1659.0], [15.5, 1693.0], [15.6, 1842.0], [15.7, 1847.0], [15.8, 1856.0], [15.9, 2018.0], [16.0, 2030.0], [16.1, 2207.0], [16.2, 2220.0], [16.3, 2226.0], [16.4, 2236.0], [16.5, 2313.0], [16.6, 2622.0], [16.7, 2678.0], [16.8, 2825.0], [16.9, 2951.0], [17.0, 3036.0], [17.1, 3145.0], [17.2, 3171.0], [17.3, 3214.0], [17.4, 3271.0], [17.5, 3292.0], [17.6, 3321.0], [17.7, 3350.0], [17.8, 3365.0], [17.9, 3409.0], [18.0, 3482.0], [18.1, 3503.0], [18.2, 3563.0], [18.3, 3575.0], [18.4, 3587.0], [18.5, 3697.0], [18.6, 3762.0], [18.7, 3802.0], [18.8, 3862.0], [18.9, 3893.0], [19.0, 3949.0], [19.1, 3988.0], [19.2, 4032.0], [19.3, 4064.0], [19.4, 4120.0], [19.5, 4177.0], [19.6, 4230.0], [19.7, 4288.0], [19.8, 4396.0], [19.9, 4415.0], [20.0, 4455.0], [20.1, 4469.0], [20.2, 4512.0], [20.3, 4548.0], [20.4, 4568.0], [20.5, 4608.0], [20.6, 4626.0], [20.7, 4676.0], [20.8, 4727.0], [20.9, 4750.0], [21.0, 4782.0], [21.1, 4817.0], [21.2, 4845.0], [21.3, 4863.0], [21.4, 4899.0], [21.5, 4934.0], [21.6, 4964.0], [21.7, 4984.0], [21.8, 4992.0], [21.9, 5027.0], [22.0, 5034.0], [22.1, 5058.0], [22.2, 5084.0], [22.3, 5111.0], [22.4, 5157.0], [22.5, 5175.0], [22.6, 5204.0], [22.7, 5244.0], [22.8, 5254.0], [22.9, 5298.0], [23.0, 5333.0], [23.1, 5379.0], [23.2, 5421.0], [23.3, 5435.0], [23.4, 5458.0], [23.5, 5535.0], [23.6, 5556.0], [23.7, 5567.0], [23.8, 5652.0], [23.9, 5711.0], [24.0, 5736.0], [24.1, 5747.0], [24.2, 5779.0], [24.3, 5873.0], [24.4, 5908.0], [24.5, 5931.0], [24.6, 5932.0], [24.7, 5952.0], [24.8, 5971.0], [24.9, 5995.0], [25.0, 6039.0], [25.1, 6082.0], [25.2, 6089.0], [25.3, 6123.0], [25.4, 6208.0], [25.5, 6235.0], [25.6, 6370.0], [25.7, 6463.0], [25.8, 6498.0], [25.9, 6625.0], [26.0, 6748.0], [26.1, 6856.0], [26.2, 7018.0], [26.3, 7284.0], [26.4, 7344.0], [26.5, 7499.0], [26.6, 7715.0], [26.7, 7809.0], [26.8, 8063.0], [26.9, 8173.0], [27.0, 8438.0], [27.1, 8485.0], [27.2, 8578.0], [27.3, 8616.0], [27.4, 8875.0], [27.5, 8964.0], [27.6, 9105.0], [27.7, 9256.0], [27.8, 9385.0], [27.9, 9646.0], [28.0, 9752.0], [28.1, 9926.0], [28.2, 10004.0], [28.3, 10181.0], [28.4, 10706.0], [28.5, 10818.0], [28.6, 10846.0], [28.7, 10901.0], [28.8, 10971.0], [28.9, 10985.0], [29.0, 11049.0], [29.1, 11117.0], [29.2, 11157.0], [29.3, 11232.0], [29.4, 11248.0], [29.5, 11308.0], [29.6, 11339.0], [29.7, 11354.0], [29.8, 11387.0], [29.9, 11410.0], [30.0, 11434.0], [30.1, 11449.0], [30.2, 11481.0], [30.3, 11490.0], [30.4, 11495.0], [30.5, 11514.0], [30.6, 11522.0], [30.7, 11546.0], [30.8, 11577.0], [30.9, 11620.0], [31.0, 11663.0], [31.1, 11693.0], [31.2, 11727.0], [31.3, 11750.0], [31.4, 11760.0], [31.5, 11778.0], [31.6, 11808.0], [31.7, 11813.0], [31.8, 11843.0], [31.9, 11885.0], [32.0, 11893.0], [32.1, 11917.0], [32.2, 11946.0], [32.3, 11974.0], [32.4, 12001.0], [32.5, 12041.0], [32.6, 12062.0], [32.7, 12091.0], [32.8, 12111.0], [32.9, 12172.0], [33.0, 12202.0], [33.1, 12282.0], [33.2, 12322.0], [33.3, 12347.0], [33.4, 12386.0], [33.5, 12455.0], [33.6, 12485.0], [33.7, 12504.0], [33.8, 12530.0], [33.9, 12597.0], [34.0, 12601.0], [34.1, 12626.0], [34.2, 12659.0], [34.3, 12696.0], [34.4, 12730.0], [34.5, 12755.0], [34.6, 12785.0], [34.7, 12830.0], [34.8, 12841.0], [34.9, 12894.0], [35.0, 12983.0], [35.1, 13041.0], [35.2, 13161.0], [35.3, 13377.0], [35.4, 14478.0], [35.5, 14798.0], [35.6, 15137.0], [35.7, 15448.0], [35.8, 15533.0], [35.9, 15675.0], [36.0, 15754.0], [36.1, 15928.0], [36.2, 15954.0], [36.3, 16075.0], [36.4, 16185.0], [36.5, 16353.0], [36.6, 16485.0], [36.7, 16522.0], [36.8, 16612.0], [36.9, 16670.0], [37.0, 16717.0], [37.1, 16743.0], [37.2, 16887.0], [37.3, 17074.0], [37.4, 17189.0], [37.5, 17297.0], [37.6, 17445.0], [37.7, 17493.0], [37.8, 17559.0], [37.9, 17659.0], [38.0, 17829.0], [38.1, 17969.0], [38.2, 17992.0], [38.3, 18056.0], [38.4, 18115.0], [38.5, 18211.0], [38.6, 18295.0], [38.7, 18449.0], [38.8, 18575.0], [38.9, 18609.0], [39.0, 18685.0], [39.1, 18813.0], [39.2, 18916.0], [39.3, 19059.0], [39.4, 19079.0], [39.5, 19257.0], [39.6, 19304.0], [39.7, 19342.0], [39.8, 19410.0], [39.9, 19486.0], [40.0, 19556.0], [40.1, 19599.0], [40.2, 19682.0], [40.3, 19818.0], [40.4, 19874.0], [40.5, 19988.0], [40.6, 20080.0], [40.7, 20116.0], [40.8, 20175.0], [40.9, 20253.0], [41.0, 20295.0], [41.1, 20342.0], [41.2, 20399.0], [41.3, 20588.0], [41.4, 20725.0], [41.5, 20799.0], [41.6, 20837.0], [41.7, 20863.0], [41.8, 20935.0], [41.9, 20960.0], [42.0, 20979.0], [42.1, 21008.0], [42.2, 21063.0], [42.3, 21127.0], [42.4, 21224.0], [42.5, 21349.0], [42.6, 21407.0], [42.7, 21604.0], [42.8, 21617.0], [42.9, 21693.0], [43.0, 21764.0], [43.1, 21811.0], [43.2, 21872.0], [43.3, 21977.0], [43.4, 22115.0], [43.5, 22193.0], [43.6, 22246.0], [43.7, 22293.0], [43.8, 22364.0], [43.9, 22411.0], [44.0, 22622.0], [44.1, 22716.0], [44.2, 22727.0], [44.3, 22784.0], [44.4, 22820.0], [44.5, 22913.0], [44.6, 22990.0], [44.7, 23046.0], [44.8, 23070.0], [44.9, 23121.0], [45.0, 23205.0], [45.1, 23219.0], [45.2, 23340.0], [45.3, 23370.0], [45.4, 23441.0], [45.5, 23529.0], [45.6, 23585.0], [45.7, 23630.0], [45.8, 23721.0], [45.9, 23765.0], [46.0, 23866.0], [46.1, 23919.0], [46.2, 23948.0], [46.3, 23992.0], [46.4, 24003.0], [46.5, 24023.0], [46.6, 24070.0], [46.7, 24093.0], [46.8, 24113.0], [46.9, 24146.0], [47.0, 24172.0], [47.1, 24210.0], [47.2, 24275.0], [47.3, 24314.0], [47.4, 24480.0], [47.5, 24570.0], [47.6, 24587.0], [47.7, 24629.0], [47.8, 24660.0], [47.9, 24747.0], [48.0, 24779.0], [48.1, 24814.0], [48.2, 24855.0], [48.3, 24867.0], [48.4, 24889.0], [48.5, 24943.0], [48.6, 25010.0], [48.7, 25040.0], [48.8, 25094.0], [48.9, 25238.0], [49.0, 25329.0], [49.1, 25371.0], [49.2, 25413.0], [49.3, 25471.0], [49.4, 25514.0], [49.5, 25608.0], [49.6, 25671.0], [49.7, 25722.0], [49.8, 25833.0], [49.9, 25905.0], [50.0, 25966.0], [50.1, 26047.0], [50.2, 26168.0], [50.3, 26221.0], [50.4, 26260.0], [50.5, 26427.0], [50.6, 26530.0], [50.7, 26590.0], [50.8, 26708.0], [50.9, 26850.0], [51.0, 26956.0], [51.1, 27099.0], [51.2, 27206.0], [51.3, 27254.0], [51.4, 27296.0], [51.5, 27332.0], [51.6, 27357.0], [51.7, 27439.0], [51.8, 27494.0], [51.9, 27553.0], [52.0, 27689.0], [52.1, 27710.0], [52.2, 27770.0], [52.3, 27796.0], [52.4, 27867.0], [52.5, 27919.0], [52.6, 28020.0], [52.7, 28092.0], [52.8, 28194.0], [52.9, 28296.0], [53.0, 28359.0], [53.1, 28489.0], [53.2, 28554.0], [53.3, 28606.0], [53.4, 28614.0], [53.5, 28653.0], [53.6, 28748.0], [53.7, 28795.0], [53.8, 29096.0], [53.9, 29239.0], [54.0, 29344.0], [54.1, 29424.0], [54.2, 29606.0], [54.3, 29783.0], [54.4, 29945.0], [54.5, 30074.0], [54.6, 30182.0], [54.7, 30336.0], [54.8, 30367.0], [54.9, 30517.0], [55.0, 30546.0], [55.1, 30610.0], [55.2, 30649.0], [55.3, 30682.0], [55.4, 30725.0], [55.5, 30777.0], [55.6, 30844.0], [55.7, 30886.0], [55.8, 30969.0], [55.9, 31012.0], [56.0, 31045.0], [56.1, 31111.0], [56.2, 31132.0], [56.3, 31174.0], [56.4, 31226.0], [56.5, 31265.0], [56.6, 31308.0], [56.7, 31419.0], [56.8, 31447.0], [56.9, 31474.0], [57.0, 31503.0], [57.1, 31542.0], [57.2, 31584.0], [57.3, 31607.0], [57.4, 31622.0], [57.5, 31656.0], [57.6, 31717.0], [57.7, 31768.0], [57.8, 31806.0], [57.9, 31822.0], [58.0, 31831.0], [58.1, 31881.0], [58.2, 31931.0], [58.3, 32001.0], [58.4, 32026.0], [58.5, 32080.0], [58.6, 32193.0], [58.7, 32210.0], [58.8, 32225.0], [58.9, 32238.0], [59.0, 32291.0], [59.1, 32331.0], [59.2, 32396.0], [59.3, 32432.0], [59.4, 32456.0], [59.5, 32486.0], [59.6, 32535.0], [59.7, 32594.0], [59.8, 32624.0], [59.9, 32673.0], [60.0, 32685.0], [60.1, 32734.0], [60.2, 32770.0], [60.3, 32796.0], [60.4, 32825.0], [60.5, 32841.0], [60.6, 32856.0], [60.7, 32878.0], [60.8, 32918.0], [60.9, 32928.0], [61.0, 33012.0], [61.1, 33056.0], [61.2, 33081.0], [61.3, 33124.0], [61.4, 33131.0], [61.5, 33158.0], [61.6, 33169.0], [61.7, 33202.0], [61.8, 33212.0], [61.9, 33241.0], [62.0, 33276.0], [62.1, 33280.0], [62.2, 33312.0], [62.3, 33360.0], [62.4, 33412.0], [62.5, 33422.0], [62.6, 33542.0], [62.7, 33552.0], [62.8, 33590.0], [62.9, 33628.0], [63.0, 33657.0], [63.1, 33681.0], [63.2, 33715.0], [63.3, 33742.0], [63.4, 33776.0], [63.5, 33781.0], [63.6, 33798.0], [63.7, 33812.0], [63.8, 33857.0], [63.9, 33890.0], [64.0, 33923.0], [64.1, 33955.0], [64.2, 33978.0], [64.3, 33992.0], [64.4, 34033.0], [64.5, 34047.0], [64.6, 34057.0], [64.7, 34111.0], [64.8, 34137.0], [64.9, 34165.0], [65.0, 34193.0], [65.1, 34217.0], [65.2, 34229.0], [65.3, 34249.0], [65.4, 34306.0], [65.5, 34322.0], [65.6, 34342.0], [65.7, 34344.0], [65.8, 34353.0], [65.9, 34369.0], [66.0, 34396.0], [66.1, 34405.0], [66.2, 34423.0], [66.3, 34450.0], [66.4, 34461.0], [66.5, 34474.0], [66.6, 34486.0], [66.7, 34517.0], [66.8, 34535.0], [66.9, 34590.0], [67.0, 34595.0], [67.1, 34608.0], [67.2, 34618.0], [67.3, 34629.0], [67.4, 34660.0], [67.5, 34676.0], [67.6, 34692.0], [67.7, 34711.0], [67.8, 34735.0], [67.9, 34756.0], [68.0, 34839.0], [68.1, 34851.0], [68.2, 34877.0], [68.3, 34906.0], [68.4, 34920.0], [68.5, 34946.0], [68.6, 34976.0], [68.7, 34986.0], [68.8, 35006.0], [68.9, 35021.0], [69.0, 35039.0], [69.1, 35071.0], [69.2, 35130.0], [69.3, 35170.0], [69.4, 35180.0], [69.5, 35254.0], [69.6, 35263.0], [69.7, 35288.0], [69.8, 35348.0], [69.9, 35372.0], [70.0, 35376.0], [70.1, 35398.0], [70.2, 35412.0], [70.3, 35423.0], [70.4, 35431.0], [70.5, 35436.0], [70.6, 35462.0], [70.7, 35471.0], [70.8, 35500.0], [70.9, 35511.0], [71.0, 35543.0], [71.1, 35552.0], [71.2, 35571.0], [71.3, 35603.0], [71.4, 35616.0], [71.5, 35636.0], [71.6, 35653.0], [71.7, 35674.0], [71.8, 35706.0], [71.9, 35725.0], [72.0, 35730.0], [72.1, 35735.0], [72.2, 35752.0], [72.3, 35789.0], [72.4, 35796.0], [72.5, 35819.0], [72.6, 35862.0], [72.7, 35871.0], [72.8, 35881.0], [72.9, 35901.0], [73.0, 35910.0], [73.1, 35929.0], [73.2, 35934.0], [73.3, 35988.0], [73.4, 35992.0], [73.5, 35997.0], [73.6, 36003.0], [73.7, 36017.0], [73.8, 36024.0], [73.9, 36034.0], [74.0, 36040.0], [74.1, 36089.0], [74.2, 36100.0], [74.3, 36109.0], [74.4, 36116.0], [74.5, 36125.0], [74.6, 36131.0], [74.7, 36157.0], [74.8, 36169.0], [74.9, 36198.0], [75.0, 36211.0], [75.1, 36226.0], [75.2, 36234.0], [75.3, 36244.0], [75.4, 36250.0], [75.5, 36286.0], [75.6, 36295.0], [75.7, 36302.0], [75.8, 36331.0], [75.9, 36356.0], [76.0, 36381.0], [76.1, 36387.0], [76.2, 36396.0], [76.3, 36407.0], [76.4, 36421.0], [76.5, 36426.0], [76.6, 36441.0], [76.7, 36457.0], [76.8, 36499.0], [76.9, 36510.0], [77.0, 36537.0], [77.1, 36552.0], [77.2, 36563.0], [77.3, 36579.0], [77.4, 36607.0], [77.5, 36628.0], [77.6, 36636.0], [77.7, 36655.0], [77.8, 36667.0], [77.9, 36686.0], [78.0, 36703.0], [78.1, 36717.0], [78.2, 36722.0], [78.3, 36741.0], [78.4, 36757.0], [78.5, 36777.0], [78.6, 36806.0], [78.7, 36832.0], [78.8, 36842.0], [78.9, 36867.0], [79.0, 36878.0], [79.1, 36886.0], [79.2, 36896.0], [79.3, 36918.0], [79.4, 36931.0], [79.5, 36939.0], [79.6, 36969.0], [79.7, 36979.0], [79.8, 37012.0], [79.9, 37051.0], [80.0, 37074.0], [80.1, 37096.0], [80.2, 37158.0], [80.3, 37189.0], [80.4, 37229.0], [80.5, 37256.0], [80.6, 37281.0], [80.7, 37314.0], [80.8, 37330.0], [80.9, 37345.0], [81.0, 37363.0], [81.1, 37384.0], [81.2, 37417.0], [81.3, 37434.0], [81.4, 37458.0], [81.5, 37496.0], [81.6, 37514.0], [81.7, 37556.0], [81.8, 37567.0], [81.9, 37574.0], [82.0, 37585.0], [82.1, 37617.0], [82.2, 37637.0], [82.3, 37664.0], [82.4, 37672.0], [82.5, 37694.0], [82.6, 37730.0], [82.7, 37741.0], [82.8, 37763.0], [82.9, 37780.0], [83.0, 37805.0], [83.1, 37819.0], [83.2, 37839.0], [83.3, 37882.0], [83.4, 37897.0], [83.5, 37931.0], [83.6, 37956.0], [83.7, 37976.0], [83.8, 38014.0], [83.9, 38032.0], [84.0, 38069.0], [84.1, 38087.0], [84.2, 38144.0], [84.3, 38166.0], [84.4, 38188.0], [84.5, 38220.0], [84.6, 38250.0], [84.7, 38269.0], [84.8, 38293.0], [84.9, 38312.0], [85.0, 38321.0], [85.1, 38384.0], [85.2, 38398.0], [85.3, 38427.0], [85.4, 38431.0], [85.5, 38457.0], [85.6, 38513.0], [85.7, 38592.0], [85.8, 38613.0], [85.9, 38628.0], [86.0, 38654.0], [86.1, 38684.0], [86.2, 38724.0], [86.3, 38809.0], [86.4, 38829.0], [86.5, 38849.0], [86.6, 38869.0], [86.7, 38898.0], [86.8, 38933.0], [86.9, 38990.0], [87.0, 39029.0], [87.1, 39120.0], [87.2, 39176.0], [87.3, 39209.0], [87.4, 39282.0], [87.5, 39295.0], [87.6, 39348.0], [87.7, 39380.0], [87.8, 39410.0], [87.9, 39430.0], [88.0, 39493.0], [88.1, 39517.0], [88.2, 39536.0], [88.3, 39572.0], [88.4, 39607.0], [88.5, 39626.0], [88.6, 39714.0], [88.7, 39729.0], [88.8, 39777.0], [88.9, 39809.0], [89.0, 39829.0], [89.1, 39834.0], [89.2, 39861.0], [89.3, 39895.0], [89.4, 39915.0], [89.5, 39937.0], [89.6, 39990.0], [89.7, 40012.0], [89.8, 40022.0], [89.9, 40034.0], [90.0, 40095.0], [90.1, 40128.0], [90.2, 40155.0], [90.3, 40244.0], [90.4, 40268.0], [90.5, 40302.0], [90.6, 40314.0], [90.7, 40339.0], [90.8, 40378.0], [90.9, 40411.0], [91.0, 40429.0], [91.1, 40447.0], [91.2, 40493.0], [91.3, 40512.0], [91.4, 40549.0], [91.5, 40579.0], [91.6, 40620.0], [91.7, 40656.0], [91.8, 40686.0], [91.9, 40719.0], [92.0, 40742.0], [92.1, 40754.0], [92.2, 40766.0], [92.3, 40821.0], [92.4, 40847.0], [92.5, 40879.0], [92.6, 40903.0], [92.7, 40928.0], [92.8, 40946.0], [92.9, 40970.0], [93.0, 41003.0], [93.1, 41020.0], [93.2, 41079.0], [93.3, 41092.0], [93.4, 41113.0], [93.5, 41138.0], [93.6, 41188.0], [93.7, 41215.0], [93.8, 41255.0], [93.9, 41296.0], [94.0, 41330.0], [94.1, 41351.0], [94.2, 41408.0], [94.3, 41436.0], [94.4, 41460.0], [94.5, 41484.0], [94.6, 41505.0], [94.7, 41556.0], [94.8, 41576.0], [94.9, 41600.0], [95.0, 41627.0], [95.1, 41702.0], [95.2, 41715.0], [95.3, 41812.0], [95.4, 41817.0], [95.5, 41859.0], [95.6, 41884.0], [95.7, 41935.0], [95.8, 41991.0], [95.9, 42047.0], [96.0, 42136.0], [96.1, 42164.0], [96.2, 42230.0], [96.3, 42310.0], [96.4, 42438.0], [96.5, 42499.0], [96.6, 42542.0], [96.7, 42563.0], [96.8, 42744.0], [96.9, 42775.0], [97.0, 42860.0], [97.1, 42951.0], [97.2, 43018.0], [97.3, 43133.0], [97.4, 43189.0], [97.5, 43263.0], [97.6, 43322.0], [97.7, 43362.0], [97.8, 43448.0], [97.9, 43552.0], [98.0, 43723.0], [98.1, 43844.0], [98.2, 43916.0], [98.3, 44052.0], [98.4, 44108.0], [98.5, 44164.0], [98.6, 44211.0], [98.7, 44387.0], [98.8, 44429.0], [98.9, 44603.0], [99.0, 44778.0], [99.1, 45005.0], [99.2, 45179.0], [99.3, 45368.0], [99.4, 45427.0], [99.5, 45544.0], [99.6, 45674.0], [99.7, 45868.0], [99.8, 46671.0], [99.9, 46972.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 161.0, "series": [{"data": [[0.0, 105.0], [100.0, 161.0], [34500.0, 14.0], [33700.0, 18.0], [32900.0, 7.0], [35300.0, 14.0], [36100.0, 25.0], [37700.0, 16.0], [36900.0, 18.0], [38500.0, 5.0], [40900.0, 14.0], [39300.0, 9.0], [40100.0, 8.0], [41700.0, 8.0], [42500.0, 8.0], [43300.0, 8.0], [44100.0, 7.0], [44900.0, 1.0], [45700.0, 2.0], [47300.0, 1.0], [200.0, 85.0], [300.0, 36.0], [400.0, 19.0], [500.0, 14.0], [600.0, 21.0], [700.0, 12.0], [800.0, 10.0], [900.0, 6.0], [1000.0, 5.0], [1100.0, 9.0], [1200.0, 14.0], [1300.0, 10.0], [1400.0, 12.0], [1500.0, 2.0], [1600.0, 13.0], [1800.0, 12.0], [1900.0, 1.0], [2000.0, 5.0], [2100.0, 2.0], [2300.0, 2.0], [2200.0, 13.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 5.0], [2700.0, 2.0], [2800.0, 3.0], [2900.0, 2.0], [3000.0, 4.0], [3100.0, 7.0], [3200.0, 10.0], [3300.0, 11.0], [3400.0, 7.0], [3500.0, 12.0], [3600.0, 3.0], [3700.0, 6.0], [3800.0, 8.0], [3900.0, 8.0], [4000.0, 8.0], [4100.0, 7.0], [4300.0, 4.0], [4200.0, 4.0], [4500.0, 10.0], [4400.0, 12.0], [4600.0, 10.0], [4800.0, 11.0], [4700.0, 12.0], [4900.0, 15.0], [5000.0, 15.0], [5100.0, 10.0], [5200.0, 11.0], [5300.0, 8.0], [5400.0, 11.0], [5500.0, 9.0], [5600.0, 6.0], [5800.0, 5.0], [5700.0, 12.0], [6000.0, 10.0], [5900.0, 20.0], [6100.0, 5.0], [6300.0, 4.0], [6200.0, 4.0], [6400.0, 6.0], [6600.0, 2.0], [6500.0, 2.0], [6900.0, 2.0], [6700.0, 4.0], [6800.0, 3.0], [7000.0, 3.0], [7400.0, 1.0], [7300.0, 6.0], [7200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7800.0, 3.0], [7700.0, 3.0], [7900.0, 1.0], [8100.0, 2.0], [8000.0, 3.0], [8600.0, 4.0], [8400.0, 4.0], [9000.0, 1.0], [9200.0, 3.0], [8800.0, 3.0], [9600.0, 3.0], [9400.0, 1.0], [10000.0, 4.0], [10200.0, 1.0], [9800.0, 2.0], [10400.0, 1.0], [11000.0, 6.0], [10800.0, 8.0], [11200.0, 8.0], [11400.0, 21.0], [11600.0, 8.0], [11800.0, 17.0], [12000.0, 14.0], [12200.0, 6.0], [12400.0, 9.0], [12600.0, 12.0], [12800.0, 9.0], [13000.0, 4.0], [13200.0, 1.0], [13600.0, 1.0], [13800.0, 2.0], [14400.0, 2.0], [14800.0, 2.0], [15400.0, 3.0], [15600.0, 5.0], [16200.0, 1.0], [16000.0, 3.0], [16400.0, 4.0], [17200.0, 4.0], [16800.0, 5.0], [17600.0, 4.0], [18400.0, 4.0], [18000.0, 4.0], [19200.0, 5.0], [18800.0, 2.0], [20000.0, 5.0], [19600.0, 5.0], [20400.0, 2.0], [20800.0, 7.0], [21200.0, 4.0], [21600.0, 9.0], [22000.0, 2.0], [22400.0, 3.0], [22800.0, 6.0], [23200.0, 5.0], [24000.0, 13.0], [23600.0, 2.0], [24400.0, 2.0], [25200.0, 3.0], [24800.0, 11.0], [25600.0, 5.0], [26400.0, 3.0], [26000.0, 4.0], [27600.0, 5.0], [27200.0, 8.0], [26800.0, 1.0], [28400.0, 4.0], [28000.0, 5.0], [29600.0, 3.0], [29200.0, 3.0], [28800.0, 2.0], [30000.0, 2.0], [30400.0, 1.0], [31600.0, 9.0], [31200.0, 8.0], [30800.0, 6.0], [32400.0, 11.0], [32000.0, 7.0], [34400.0, 19.0], [33600.0, 10.0], [32800.0, 16.0], [36000.0, 22.0], [35200.0, 10.0], [36800.0, 22.0], [37600.0, 16.0], [38400.0, 13.0], [40000.0, 13.0], [40800.0, 11.0], [39200.0, 9.0], [41600.0, 6.0], [42400.0, 4.0], [44000.0, 4.0], [43200.0, 4.0], [44800.0, 2.0], [45600.0, 3.0], [33900.0, 14.0], [33100.0, 16.0], [34700.0, 10.0], [35500.0, 17.0], [36300.0, 20.0], [37100.0, 7.0], [37900.0, 11.0], [38700.0, 6.0], [40300.0, 12.0], [39500.0, 11.0], [41100.0, 10.0], [41900.0, 7.0], [42700.0, 6.0], [44300.0, 2.0], [43500.0, 1.0], [45900.0, 1.0], [45100.0, 1.0], [16500.0, 4.0], [16900.0, 1.0], [17300.0, 1.0], [18100.0, 5.0], [18900.0, 3.0], [19300.0, 7.0], [18500.0, 3.0], [20100.0, 5.0], [19700.0, 1.0], [20900.0, 12.0], [21300.0, 3.0], [20500.0, 2.0], [21700.0, 5.0], [22100.0, 5.0], [22500.0, 2.0], [23300.0, 7.0], [22900.0, 5.0], [23700.0, 7.0], [24100.0, 9.0], [24500.0, 8.0], [25300.0, 8.0], [24900.0, 4.0], [25700.0, 4.0], [26100.0, 4.0], [26500.0, 5.0], [27300.0, 8.0], [26900.0, 3.0], [27700.0, 8.0], [28500.0, 5.0], [28100.0, 3.0], [28900.0, 1.0], [29300.0, 4.0], [30100.0, 3.0], [30500.0, 8.0], [29700.0, 2.0], [31300.0, 2.0], [30900.0, 4.0], [31700.0, 8.0], [32500.0, 6.0], [32100.0, 5.0], [33800.0, 10.0], [34600.0, 22.0], [33000.0, 8.0], [35400.0, 23.0], [36200.0, 25.0], [37000.0, 13.0], [37800.0, 16.0], [38600.0, 13.0], [39400.0, 9.0], [40200.0, 8.0], [41800.0, 12.0], [41000.0, 13.0], [43400.0, 4.0], [44200.0, 3.0], [45000.0, 3.0], [46600.0, 1.0], [45800.0, 1.0], [47400.0, 1.0], [34100.0, 14.0], [33300.0, 6.0], [35700.0, 23.0], [34900.0, 15.0], [36500.0, 19.0], [37300.0, 17.0], [38100.0, 11.0], [38900.0, 7.0], [40500.0, 10.0], [39700.0, 10.0], [41300.0, 8.0], [42100.0, 8.0], [42900.0, 5.0], [44500.0, 2.0], [43700.0, 4.0], [45300.0, 4.0], [46900.0, 3.0], [46100.0, 1.0], [48500.0, 1.0], [8300.0, 3.0], [8500.0, 4.0], [9100.0, 3.0], [8900.0, 3.0], [9300.0, 3.0], [9500.0, 1.0], [9700.0, 2.0], [9900.0, 2.0], [10100.0, 2.0], [10500.0, 1.0], [10700.0, 2.0], [10900.0, 8.0], [11100.0, 6.0], [11300.0, 12.0], [11500.0, 15.0], [11700.0, 14.0], [11900.0, 12.0], [12100.0, 7.0], [12300.0, 9.0], [12500.0, 10.0], [12700.0, 11.0], [12900.0, 5.0], [13100.0, 3.0], [13300.0, 1.0], [14700.0, 2.0], [15100.0, 1.0], [15300.0, 2.0], [15500.0, 3.0], [15700.0, 3.0], [16100.0, 3.0], [15900.0, 6.0], [16300.0, 3.0], [16600.0, 7.0], [17400.0, 6.0], [17000.0, 2.0], [17800.0, 4.0], [18200.0, 5.0], [19000.0, 6.0], [19400.0, 4.0], [18600.0, 4.0], [20200.0, 7.0], [19800.0, 5.0], [21000.0, 6.0], [21400.0, 3.0], [21800.0, 4.0], [22200.0, 7.0], [22600.0, 3.0], [23400.0, 5.0], [23000.0, 7.0], [24200.0, 9.0], [23800.0, 5.0], [24600.0, 5.0], [25400.0, 7.0], [25000.0, 10.0], [25800.0, 5.0], [26600.0, 3.0], [26200.0, 6.0], [27400.0, 7.0], [27000.0, 4.0], [28600.0, 9.0], [27800.0, 5.0], [28200.0, 5.0], [29400.0, 3.0], [29000.0, 1.0], [30200.0, 2.0], [30600.0, 9.0], [29800.0, 1.0], [31400.0, 12.0], [31000.0, 8.0], [32600.0, 10.0], [31800.0, 12.0], [32200.0, 14.0], [33200.0, 17.0], [34000.0, 11.0], [34800.0, 12.0], [36400.0, 20.0], [35600.0, 17.0], [37200.0, 11.0], [38800.0, 15.0], [38000.0, 12.0], [39600.0, 8.0], [40400.0, 14.0], [41200.0, 9.0], [42000.0, 4.0], [42800.0, 3.0], [44400.0, 4.0], [43600.0, 2.0], [45200.0, 1.0], [34300.0, 23.0], [33500.0, 10.0], [35100.0, 10.0], [36700.0, 21.0], [35900.0, 23.0], [37500.0, 18.0], [38300.0, 12.0], [40700.0, 16.0], [39100.0, 5.0], [39900.0, 11.0], [41500.0, 10.0], [42300.0, 4.0], [43900.0, 3.0], [43100.0, 5.0], [44700.0, 2.0], [46300.0, 1.0], [45500.0, 3.0], [16700.0, 5.0], [17100.0, 2.0], [17900.0, 5.0], [17500.0, 4.0], [18300.0, 2.0], [19100.0, 1.0], [18700.0, 3.0], [19900.0, 3.0], [19500.0, 7.0], [20300.0, 7.0], [21100.0, 4.0], [20700.0, 7.0], [21500.0, 1.0], [21900.0, 4.0], [22300.0, 4.0], [22700.0, 8.0], [23500.0, 7.0], [23100.0, 5.0], [24300.0, 3.0], [23900.0, 10.0], [24700.0, 10.0], [25500.0, 4.0], [25100.0, 1.0], [26300.0, 2.0], [25900.0, 4.0], [26700.0, 3.0], [27500.0, 3.0], [27100.0, 2.0], [27900.0, 4.0], [28300.0, 3.0], [29500.0, 1.0], [28700.0, 5.0], [29100.0, 1.0], [30300.0, 5.0], [30700.0, 8.0], [29900.0, 4.0], [31100.0, 9.0], [31500.0, 10.0], [32700.0, 11.0], [31900.0, 6.0], [32300.0, 6.0], [34200.0, 11.0], [33400.0, 6.0], [35800.0, 15.0], [35000.0, 14.0], [36600.0, 21.0], [38200.0, 15.0], [37400.0, 13.0], [39000.0, 6.0], [39800.0, 16.0], [40600.0, 9.0], [41400.0, 15.0], [42200.0, 3.0], [43000.0, 4.0], [43800.0, 3.0], [44600.0, 2.0], [45400.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 48500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2919.0, "series": [{"data": [[0.0, 403.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 112.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2919.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 7.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.69868388E12, "maxY": 803.6114649681529, "series": [{"data": [[1.69868394E12, 801.5931451612902], [1.69868388E12, 803.6114649681529], [1.698684E12, 10.0]], "isOverall": false, "label": "Voila Horego", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.698684E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5005.814814814815, "minX": 1.0, "maxY": 48500.0, "series": [{"data": [[2.0, 43147.0], [3.0, 48500.0], [4.0, 40825.0], [5.0, 40287.0], [6.0, 46931.0], [7.0, 42372.0], [8.0, 40435.0], [9.0, 28489.0], [10.0, 39721.0], [11.0, 40264.0], [12.0, 30669.0], [13.0, 39926.0], [14.0, 42392.0], [15.0, 39748.0], [16.0, 39212.0], [17.0, 43362.0], [18.0, 44955.0], [19.0, 38642.0], [20.0, 27908.0], [21.0, 39282.0], [22.0, 44052.0], [23.0, 39937.0], [24.0, 42542.0], [25.0, 42542.0], [26.0, 26253.0], [27.0, 43448.0], [28.0, 39536.0], [29.0, 26771.0], [30.0, 43499.0], [31.0, 26260.0], [33.0, 37662.0], [32.0, 27690.0], [35.0, 26044.0], [34.0, 37418.0], [37.0, 26047.0], [36.0, 36621.0], [39.0, 26112.0], [38.0, 25909.0], [41.0, 36116.0], [40.0, 41351.0], [43.0, 41092.0], [42.0, 37245.0], [45.0, 26590.0], [44.0, 28570.0], [47.0, 25329.0], [46.0, 42744.0], [49.0, 43097.0], [48.0, 26242.0], [51.0, 42310.0], [50.0, 28773.0], [53.0, 28748.0], [52.0, 28641.0], [55.0, 37229.0], [54.0, 41859.0], [57.0, 26754.0], [56.0, 27311.0], [59.0, 24660.0], [58.0, 28194.0], [61.0, 37694.0], [60.0, 36939.0], [63.0, 37179.0], [62.0, 25420.0], [67.0, 25716.0], [66.0, 28493.0], [65.0, 25422.0], [64.0, 28783.0], [71.0, 42174.0], [70.0, 36668.0], [69.0, 38319.0], [68.0, 41935.0], [75.0, 37256.0], [74.0, 26221.0], [73.0, 42170.0], [72.0, 42764.0], [79.0, 41979.0], [78.0, 26531.0], [77.0, 25589.0], [76.0, 26515.0], [83.0, 25040.0], [82.0, 37449.0], [81.0, 36396.0], [80.0, 37672.0], [87.0, 38271.0], [86.0, 24856.0], [85.0, 24928.0], [84.0, 39714.0], [91.0, 25608.0], [90.0, 38167.0], [89.0, 38276.0], [88.0, 23952.0], [95.0, 36833.0], [94.0, 28688.0], [93.0, 36294.0], [92.0, 39444.0], [99.0, 36776.0], [98.0, 25068.0], [97.0, 41450.0], [96.0, 28614.0], [103.0, 36034.0], [102.0, 27385.0], [101.0, 27731.0], [100.0, 41600.0], [107.0, 40405.0], [106.0, 25780.0], [105.0, 36563.0], [104.0, 24779.0], [111.0, 35288.0], [110.0, 26168.0], [109.0, 37941.0], [108.0, 25905.0], [115.0, 36634.0], [114.0, 36245.0], [113.0, 27710.0], [112.0, 36890.0], [119.0, 35735.0], [118.0, 36126.0], [117.0, 36918.0], [116.0, 28092.0], [123.0, 38767.5], [121.0, 25671.0], [120.0, 35864.0], [127.0, 39797.0], [126.0, 41482.0], [125.0, 24575.0], [124.0, 25368.0], [135.0, 24790.0], [134.0, 35665.0], [133.0, 40737.0], [132.0, 40378.0], [131.0, 35984.0], [130.0, 38405.0], [129.0, 25021.0], [128.0, 40360.0], [143.0, 24844.0], [142.0, 36703.0], [141.0, 41884.0], [140.0, 36152.0], [139.0, 27897.0], [138.0, 36415.0], [137.0, 24887.0], [136.0, 42198.0], [151.0, 36165.0], [150.0, 25236.0], [149.0, 37458.0], [148.0, 36034.0], [147.0, 27217.0], [146.0, 24847.0], [145.0, 41627.0], [144.0, 35539.0], [159.0, 23894.0], [158.0, 35680.0], [157.0, 36034.0], [156.0, 36024.0], [155.0, 32702.0], [154.0, 27935.0], [153.0, 41460.0], [152.0, 23664.0], [167.0, 25010.0], [166.0, 27310.0], [165.0, 25471.0], [164.0, 26567.0], [163.0, 27730.0], [162.0, 24747.0], [161.0, 27728.0], [160.0, 27439.0], [175.0, 25342.0], [174.0, 25069.0], [173.0, 27692.0], [172.0, 26171.0], [171.0, 38004.0], [170.0, 37733.0], [169.0, 41159.0], [168.0, 24867.0], [183.0, 25833.0], [182.0, 37363.0], [181.0, 27006.0], [180.0, 36389.0], [179.0, 36880.0], [178.0, 36204.0], [177.0, 25397.0], [176.0, 26203.0], [191.0, 33926.333333333336], [188.0, 38170.0], [187.0, 25374.0], [186.0, 26691.0], [185.0, 27626.0], [184.0, 24314.0], [199.0, 26235.0], [198.0, 25238.0], [197.0, 25514.0], [196.0, 27221.0], [195.0, 39966.0], [194.0, 25431.0], [193.0, 24402.0], [192.0, 36507.0], [207.0, 35718.0], [206.0, 25484.0], [205.0, 26433.0], [204.0, 38144.0], [203.0, 38856.0], [202.0, 26928.0], [201.0, 24592.0], [200.0, 37567.0], [215.0, 24938.0], [214.0, 25629.0], [213.0, 36114.0], [212.0, 25413.0], [211.0, 36823.0], [210.0, 24716.0], [209.0, 37362.0], [208.0, 27826.0], [223.0, 25006.0], [222.0, 24882.0], [221.0, 34664.0], [220.0, 38654.0], [219.0, 26643.0], [218.0, 23585.0], [217.0, 37343.0], [216.0, 25941.0], [231.0, 35992.0], [230.0, 35728.0], [229.0, 35552.0], [228.0, 24943.0], [227.0, 35484.0], [226.0, 36886.0], [225.0, 41582.0], [224.0, 35789.0], [239.0, 24944.0], [238.0, 37961.0], [237.0, 24814.0], [236.0, 36638.0], [235.0, 23987.0], [234.0, 41301.0], [233.0, 40106.0], [232.0, 37717.0], [247.0, 24608.0], [246.0, 24210.0], [245.0, 41199.0], [244.0, 23992.0], [243.0, 37706.0], [242.0, 24776.0], [241.0, 35736.0], [240.0, 37276.0], [255.0, 24797.0], [254.0, 39555.0], [253.0, 37767.0], [252.0, 24557.0], [251.0, 25048.0], [250.0, 36213.0], [249.0, 25020.0], [248.0, 24275.0], [270.0, 34594.0], [261.0, 10712.333333333334], [260.0, 34839.0], [263.0, 24570.0], [257.0, 24130.0], [256.0, 23979.0], [259.0, 35423.0], [258.0, 25142.0], [262.0, 35400.0], [268.0, 13242.5], [271.0, 35752.0], [269.0, 22726.0], [267.0, 27099.0], [266.0, 25586.0], [265.0, 23723.0], [264.0, 36381.0], [286.0, 34524.0], [280.0, 20424.0], [276.0, 15380.0], [277.0, 40233.0], [279.0, 26938.0], [273.0, 24086.0], [272.0, 23745.0], [275.0, 38395.0], [274.0, 24200.0], [278.0, 23998.0], [282.0, 15334.0], [287.0, 23482.0], [285.0, 36836.0], [284.0, 25000.0], [283.0, 26379.0], [281.0, 26072.0], [300.0, 20203.5], [288.0, 14787.0], [289.0, 7914.8], [291.0, 24865.0], [290.0, 34324.0], [294.0, 20633.5], [293.0, 36704.0], [292.0, 40751.0], [295.0, 23314.0], [303.0, 23888.0], [297.0, 35997.0], [296.0, 24113.0], [302.0, 34851.0], [301.0, 24006.0], [299.0, 34912.0], [298.0, 23936.0], [316.0, 19681.5], [304.0, 8237.0], [307.0, 14967.5], [306.0, 24860.0], [305.0, 40353.0], [309.0, 10005.6], [308.0, 38674.0], [311.0, 26530.0], [310.0, 23592.0], [317.0, 10805.0], [319.0, 14341.5], [313.0, 22364.0], [312.0, 22997.0], [318.0, 23997.0], [315.0, 38939.0], [314.0, 34673.0], [334.0, 15497.5], [327.0, 15280.5], [321.0, 19869.5], [320.0, 26461.0], [323.0, 24889.0], [322.0, 34682.0], [325.0, 20615.5], [324.0, 24738.0], [326.0, 26040.0], [329.0, 14119.5], [335.0, 35628.0], [328.0, 23570.0], [333.0, 35618.0], [332.0, 34050.0], [331.0, 25817.0], [330.0, 37417.0], [348.0, 11403.666666666668], [338.0, 20650.0], [339.0, 9826.25], [342.0, 20682.0], [341.0, 24029.0], [340.0, 34369.0], [343.0, 14350.0], [337.0, 24172.0], [336.0, 22935.0], [345.0, 9557.2], [347.0, 14856.0], [346.0, 38085.0], [349.0, 5540.578125000002], [350.0, 6604.25], [351.0, 23109.0], [344.0, 40128.0], [366.0, 25371.0], [353.0, 11453.333333333332], [358.0, 5005.814814814815], [357.0, 24206.0], [356.0, 26320.0], [359.0, 25865.0], [352.0, 22802.0], [355.0, 14339.0], [354.0, 39402.0], [367.0, 38333.0], [361.0, 22876.0], [360.0, 23375.0], [365.0, 37897.0], [364.0, 24792.0], [363.0, 24023.0], [362.0, 23868.0], [375.0, 10979.0], [372.0, 14922.0], [373.0, 8583.142857142857], [374.0, 12213.75], [376.0, 6329.75], [377.0, 6643.11111111111], [379.0, 21872.0], [378.0, 22594.0], [383.0, 33628.0], [382.0, 22532.0], [381.0, 23475.0], [380.0, 33992.0], [371.0, 23039.0], [370.0, 23121.0], [369.0, 22812.0], [368.0, 36524.0], [398.0, 32796.0], [399.0, 24034.0], [397.0, 23068.0], [396.0, 23048.0], [395.0, 38809.0], [394.0, 33798.0], [393.0, 25708.0], [392.0, 25598.0], [391.0, 22181.0], [385.0, 22764.0], [384.0, 38032.0], [387.0, 25671.0], [386.0, 21693.0], [390.0, 34889.0], [389.0, 22193.0], [388.0, 34364.0], [414.0, 17393.5], [415.0, 39054.0], [413.0, 33776.0], [412.0, 38754.0], [411.0, 34718.0], [410.0, 37440.0], [409.0, 35039.0], [408.0, 34193.0], [407.0, 22204.0], [401.0, 24733.0], [400.0, 39120.0], [403.0, 24256.0], [402.0, 35879.0], [406.0, 21900.0], [405.0, 36421.0], [404.0, 37725.0], [431.0, 32451.0], [427.0, 13371.0], [430.0, 37314.0], [429.0, 38264.0], [428.0, 32408.0], [419.0, 37866.0], [418.0, 34992.0], [417.0, 22333.0], [416.0, 38031.0], [426.0, 37575.0], [425.0, 37672.0], [424.0, 35032.0], [423.0, 32051.0], [422.0, 24779.0], [421.0, 38396.0], [420.0, 33167.0], [446.0, 36567.0], [447.0, 31164.0], [445.0, 32432.0], [444.0, 32769.0], [443.0, 34430.0], [442.0, 36387.0], [441.0, 32841.0], [440.0, 34069.0], [439.0, 37522.0], [433.0, 36537.0], [432.0, 33047.0], [435.0, 38188.0], [434.0, 32685.0], [438.0, 38604.0], [437.0, 32918.0], [436.0, 38085.0], [462.0, 24299.0], [463.0, 35572.0], [461.0, 32323.0], [460.0, 34226.0], [459.0, 33211.0], [458.0, 38293.0], [457.0, 36370.0], [456.0, 33522.0], [455.0, 33081.0], [449.0, 32812.0], [448.0, 36008.0], [451.0, 33143.0], [450.0, 37563.0], [454.0, 37780.0], [453.0, 33075.0], [452.0, 31503.0], [478.0, 37585.0], [479.0, 31121.0], [477.0, 35861.0], [476.0, 24151.0], [475.0, 32486.0], [474.0, 38312.0], [473.0, 24101.0], [472.0, 36407.0], [471.0, 38301.0], [465.0, 32842.0], [464.0, 32592.0], [467.0, 37922.0], [466.0, 33795.0], [470.0, 31008.0], [469.0, 37835.0], [468.0, 32372.0], [494.0, 31773.0], [495.0, 33776.0], [493.0, 32456.0], [492.0, 31324.0], [491.0, 36828.0], [490.0, 32331.0], [489.0, 35417.0], [488.0, 34047.0], [487.0, 36926.0], [481.0, 33778.0], [480.0, 38014.0], [483.0, 37399.0], [482.0, 23948.0], [486.0, 31958.0], [485.0, 31856.0], [484.0, 35256.0], [510.0, 23370.0], [511.0, 37667.0], [509.0, 31806.0], [508.0, 32028.0], [507.0, 31490.0], [506.0, 36655.0], [505.0, 37804.0], [504.0, 35754.0], [503.0, 34530.0], [497.0, 31577.0], [496.0, 33296.0], [499.0, 33870.0], [498.0, 37364.0], [502.0, 23721.0], [501.0, 35004.0], [500.0, 36214.0], [517.0, 18271.5], [513.0, 19350.5], [512.0, 32594.0], [514.0, 14780.666666666666], [516.0, 12270.5], [515.0, 31584.0], [518.0, 13977.333333333334], [519.0, 31775.0], [537.0, 33160.0], [536.0, 35419.0], [539.0, 31827.0], [538.0, 37514.0], [541.0, 32011.0], [540.0, 37075.0], [542.0, 17198.0], [543.0, 31931.0], [528.0, 34322.0], [527.0, 19446.0], [526.0, 32080.0], [525.0, 22784.0], [524.0, 36510.0], [523.0, 31717.0], [522.0, 32480.0], [521.0, 36892.0], [520.0, 36982.0], [529.0, 18234.0], [530.0, 15464.333333333334], [531.0, 15378.666666666668], [535.0, 15107.333333333334], [534.0, 33158.0], [533.0, 32197.0], [532.0, 31866.0], [549.0, 11952.0], [545.0, 10886.166666666666], [544.0, 37588.0], [546.0, 19446.5], [548.0, 22439.5], [547.0, 30546.0], [550.0, 20100.0], [568.0, 29324.0], [551.0, 37017.0], [569.0, 12324.75], [575.0, 20017.5], [560.0, 31706.0], [562.0, 36926.0], [561.0, 36952.0], [564.0, 36667.0], [563.0, 33202.0], [574.0, 33241.0], [573.0, 32716.0], [572.0, 32231.0], [571.0, 31614.0], [570.0, 33422.0], [552.0, 13857.666666666666], [554.0, 32216.0], [553.0, 31156.0], [556.0, 32193.0], [555.0, 31597.0], [558.0, 31919.0], [557.0, 31822.0], [559.0, 31831.0], [565.0, 14367.0], [566.0, 19814.5], [567.0, 8808.0], [605.0, 32633.0], [579.0, 8157.916666666666], [587.0, 18925.0], [586.0, 31554.0], [585.0, 31403.0], [584.0, 31820.0], [588.0, 36425.0], [589.0, 17034.0], [590.0, 9840.5], [591.0, 32638.0], [578.0, 31841.0], [577.0, 32126.0], [576.0, 36868.0], [594.0, 18391.5], [593.0, 31951.0], [592.0, 32870.0], [595.0, 35358.0], [597.0, 36876.0], [596.0, 32798.0], [599.0, 30682.0], [598.0, 31618.0], [607.0, 33312.0], [606.0, 31431.0], [604.0, 33063.0], [603.0, 33278.0], [602.0, 33110.0], [601.0, 31768.0], [600.0, 33046.0], [583.0, 36234.0], [582.0, 37158.0], [581.0, 36131.0], [580.0, 35525.0], [637.0, 19035.0], [615.0, 10165.166666666666], [608.0, 12796.25], [610.0, 30138.0], [609.0, 32396.0], [623.0, 32960.0], [622.0, 34462.0], [621.0, 32218.0], [620.0, 32825.0], [619.0, 31819.0], [618.0, 34862.0], [617.0, 35996.0], [616.0, 32888.0], [611.0, 18671.0], [613.0, 11411.25], [612.0, 31881.0], [614.0, 34352.0], [628.0, 12559.75], [627.0, 32439.0], [626.0, 36297.0], [625.0, 31819.0], [624.0, 35609.0], [629.0, 31487.0], [638.0, 16062.666666666666], [639.0, 35448.0], [635.0, 15501.333333333334], [636.0, 35566.0], [630.0, 10581.833333333332], [631.0, 18756.5], [633.0, 14450.666666666666], [632.0, 35571.0], [634.0, 13007.0], [669.0, 35871.0], [664.0, 8769.111111111111], [647.0, 19306.0], [646.0, 33543.0], [645.0, 36089.0], [644.0, 32719.0], [643.0, 31068.0], [642.0, 36091.0], [641.0, 36492.0], [640.0, 35536.0], [655.0, 35918.0], [654.0, 36636.0], [653.0, 36502.0], [652.0, 32025.0], [649.0, 9002.833333333334], [648.0, 30777.0], [650.0, 34572.0], [651.0, 19787.0], [663.0, 10880.714285714286], [662.0, 34450.0], [661.0, 32429.0], [660.0, 33210.0], [659.0, 30610.0], [658.0, 35873.0], [657.0, 32848.0], [656.0, 31402.0], [671.0, 30725.0], [670.0, 33276.0], [668.0, 31607.0], [667.0, 29251.0], [666.0, 32771.0], [665.0, 35731.0], [699.0, 28395.0], [673.0, 19970.0], [672.0, 35462.0], [674.0, 35992.0], [687.0, 31226.0], [686.0, 33960.0], [685.0, 34137.0], [684.0, 30844.0], [683.0, 34129.0], [682.0, 35929.0], [681.0, 34881.0], [680.0, 30557.0], [675.0, 11983.875], [696.0, 9733.875], [679.0, 35376.0], [678.0, 36109.0], [677.0, 33097.0], [676.0, 35998.0], [701.0, 21018.0], [702.0, 16187.0], [703.0, 32624.0], [695.0, 29207.0], [694.0, 33758.0], [693.0, 33781.0], [692.0, 34982.0], [691.0, 33681.0], [690.0, 34013.0], [689.0, 29416.0], [688.0, 31206.0], [700.0, 33399.0], [698.0, 31045.0], [697.0, 30805.0], [708.0, 18246.0], [707.0, 18408.0], [706.0, 33237.0], [705.0, 34344.0], [704.0, 30486.0], [710.0, 20336.5], [709.0, 28254.0], [711.0, 27335.0], [729.0, 27790.0], [728.0, 29096.0], [731.0, 30890.0], [730.0, 33923.0], [733.0, 28434.0], [732.0, 34452.0], [715.0, 10470.714285714286], [714.0, 29783.0], [713.0, 32370.0], [712.0, 30859.0], [716.0, 14099.333333333334], [719.0, 12746.0], [718.0, 28653.0], [717.0, 30531.0], [720.0, 10920.0], [721.0, 14225.0], [723.0, 27841.0], [722.0, 28296.0], [725.0, 28606.0], [724.0, 20906.0], [727.0, 33056.0], [726.0, 29424.0], [735.0, 29344.0], [734.0, 33266.0], [761.0, 17862.5], [766.0, 33287.0], [742.0, 10075.666666666666], [751.0, 28020.0], [737.0, 33657.0], [736.0, 29318.0], [739.0, 32884.0], [738.0, 30516.0], [741.0, 30517.0], [740.0, 34461.0], [750.0, 32610.0], [749.0, 20342.0], [748.0, 29968.0], [747.0, 20333.0], [746.0, 31294.0], [745.0, 34696.0], [744.0, 32535.0], [760.0, 33704.0], [743.0, 33282.0], [755.0, 17814.5], [758.0, 14049.5], [757.0, 29765.0], [756.0, 32388.0], [759.0, 30886.0], [767.0, 33132.0], [752.0, 33420.0], [754.0, 27494.0], [753.0, 29366.0], [765.0, 32200.0], [764.0, 29945.0], [763.0, 32171.0], [762.0, 33921.0], [796.0, 27496.0], [772.0, 17424.0], [770.0, 12580.285714285714], [769.0, 28744.0], [768.0, 28530.0], [771.0, 32856.0], [783.0, 27433.0], [782.0, 33585.0], [781.0, 32918.0], [774.0, 16313.333333333334], [773.0, 27048.0], [775.0, 27332.0], [793.0, 27468.0], [792.0, 33412.0], [795.0, 32666.0], [794.0, 27294.0], [778.0, 21915.5], [777.0, 33778.0], [776.0, 28795.0], [779.0, 27473.0], [780.0, 19127.5], [799.0, 26956.0], [785.0, 28359.0], [784.0, 28575.0], [787.0, 31980.0], [786.0, 27553.0], [789.0, 31542.0], [788.0, 25722.0], [791.0, 28034.0], [790.0, 27045.0], [798.0, 28352.0], [797.0, 27296.0], [825.0, 24855.0], [830.0, 14044.0], [827.0, 14918.0], [826.0, 17561.5], [831.0, 31066.0], [817.0, 32279.0], [816.0, 27279.0], [819.0, 28111.0], [818.0, 31711.0], [821.0, 29690.0], [820.0, 29239.0], [829.0, 27515.0], [828.0, 30994.0], [824.0, 27171.0], [807.0, 30969.0], [806.0, 31449.0], [805.0, 31598.0], [804.0, 27952.0], [803.0, 31229.0], [802.0, 28299.0], [801.0, 28231.0], [800.0, 29523.0], [815.0, 29473.0], [814.0, 28809.0], [813.0, 28901.0], [812.0, 31510.0], [811.0, 27770.0], [810.0, 28280.0], [809.0, 28609.0], [808.0, 32482.0], [823.0, 28021.0], [822.0, 32734.0], [859.0, 20161.5], [836.0, 19913.0], [847.0, 20814.0], [833.0, 27867.0], [832.0, 31632.0], [835.0, 28050.0], [834.0, 32158.0], [846.0, 28580.0], [845.0, 27249.0], [844.0, 30528.0], [843.0, 29121.5], [841.0, 31275.0], [840.0, 28109.0], [858.0, 21342.5], [863.0, 31175.0], [849.0, 27494.0], [848.0, 27589.0], [851.0, 31552.0], [850.0, 30723.0], [853.0, 30632.0], [852.0, 30631.0], [855.0, 31133.0], [854.0, 30672.0], [862.0, 31012.0], [861.0, 30738.0], [860.0, 27357.0], [857.0, 28400.0], [856.0, 31250.0], [839.0, 31622.0], [838.0, 28653.0], [837.0, 25094.0], [892.0, 20814.0], [871.0, 20082.0], [873.0, 19020.0], [872.0, 30942.0], [875.0, 30352.0], [874.0, 30795.0], [877.0, 27689.0], [876.0, 29935.0], [879.0, 26708.0], [864.0, 30245.0], [866.0, 31068.0], [865.0, 31265.0], [868.0, 27254.0], [867.0, 30789.0], [870.0, 31022.0], [869.0, 31129.0], [878.0, 31174.0], [895.0, 21416.666666666668], [881.0, 21913.0], [880.0, 27776.0], [883.0, 25876.0], [882.0, 24535.0], [885.0, 19375.0], [884.0, 21390.0], [887.0, 22465.75], [886.0, 25302.0], [894.0, 23926.0], [893.0, 22008.666666666668], [891.0, 19273.0], [890.0, 21617.0], [889.0, 21867.875], [888.0, 22816.0], [924.0, 20173.666666666668], [906.0, 17569.0], [905.0, 23041.0], [904.0, 22595.0], [908.0, 20429.0], [907.0, 24130.25], [910.0, 23630.0], [909.0, 19266.333333333332], [921.0, 12580.0], [927.0, 16712.0], [912.0, 21100.333333333332], [914.0, 20799.0], [913.0, 17189.5], [917.0, 20491.2], [915.0, 19653.0], [919.0, 17474.0], [918.0, 24070.0], [926.0, 18078.0], [925.0, 20033.5], [923.0, 22470.0], [922.0, 19179.0], [920.0, 20103.11111111111], [903.0, 15153.5], [902.0, 20696.333333333332], [901.0, 20712.0], [900.0, 24340.0], [899.0, 17297.0], [898.0, 20953.6], [897.0, 18658.0], [896.0, 21768.25], [911.0, 21880.0], [956.0, 20116.5], [941.0, 16760.75], [940.0, 21821.0], [939.0, 18825.0], [938.0, 20238.5], [937.0, 18115.0], [936.0, 16016.0], [943.0, 20390.5], [929.0, 20926.428571428572], [928.0, 18915.5], [931.0, 20011.0], [930.0, 19200.25], [933.0, 20364.0], [932.0, 15533.0], [935.0, 20828.0], [934.0, 23205.0], [942.0, 17543.5], [959.0, 22081.0], [945.0, 21741.75], [944.0, 19517.0], [947.0, 18056.0], [946.0, 21005.0], [949.0, 21040.2], [948.0, 21033.0], [951.0, 19313.666666666668], [950.0, 18442.0], [958.0, 19002.666666666668], [957.0, 20477.333333333332], [955.0, 19425.0], [954.0, 21309.5], [953.0, 20092.0], [952.0, 19089.166666666668], [988.0, 17524.777777777777], [991.0, 17719.625000000004], [977.0, 15684.0], [976.0, 18828.375], [979.0, 17853.0], [978.0, 18258.5], [981.0, 18468.0], [980.0, 16975.0], [990.0, 20863.0], [989.0, 16983.666666666668], [987.0, 17402.0], [986.0, 21042.5], [985.0, 16055.0], [984.0, 16470.5], [975.0, 18178.0], [961.0, 19371.5], [960.0, 19129.0], [963.0, 19302.666666666668], [962.0, 20046.0], [965.0, 20260.333333333332], [964.0, 19692.285714285714], [967.0, 18618.5], [966.0, 21196.5], [974.0, 19591.5], [973.0, 17879.5], [972.0, 17806.0], [971.0, 18980.11111111111], [970.0, 19323.153846153844], [969.0, 19296.0], [968.0, 18296.2], [983.0, 21438.0], [982.0, 18946.5], [996.0, 18630.5], [1000.0, 22467.343275488074], [999.0, 20935.0], [998.0, 19718.0], [997.0, 18073.000000000004], [995.0, 16535.0], [994.0, 18795.5], [993.0, 18393.0], [992.0, 21027.0], [1.0, 43723.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[797.7747747747773, 22757.62162162166]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 685.2666666666667, "minX": 1.69868388E12, "maxY": 3122869.15, "series": [{"data": [[1.69868394E12, 3122869.15], [1.69868388E12, 933479.75], [1.698684E12, 27221.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69868394E12, 89445.33333333333], [1.69868388E12, 33974.8], [1.698684E12, 685.2666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.698684E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5603.75265392781, "minX": 1.69868388E12, "maxY": 40715.78947368422, "series": [{"data": [[1.69868394E12, 29135.742338709693], [1.69868388E12, 5603.75265392781], [1.698684E12, 40715.78947368422]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.698684E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5365.4033970276005, "minX": 1.69868388E12, "maxY": 34467.94736842105, "series": [{"data": [[1.69868394E12, 28128.712500000034], [1.69868388E12, 5365.4033970276005], [1.698684E12, 34467.94736842105]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.698684E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.69868388E12, "maxY": 520.050955414013, "series": [{"data": [[1.69868394E12, 93.58104838709691], [1.69868388E12, 520.050955414013], [1.698684E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.698684E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.69868388E12, "maxY": 48500.0, "series": [{"data": [[1.69868394E12, 47445.0], [1.69868388E12, 16505.0], [1.698684E12, 48500.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69868394E12, 40891.7], [1.69868388E12, 12076.8], [1.698684E12, 46931.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69868394E12, 45266.12], [1.69868388E12, 13070.279999999999], [1.698684E12, 48500.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69868394E12, 42196.799999999996], [1.69868388E12, 12610.0], [1.698684E12, 48500.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69868394E12, 28.0], [1.69868388E12, 23.0], [1.698684E12, 28489.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69868394E12, 33778.0], [1.69868388E12, 4980.0], [1.698684E12, 40435.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.698684E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 1.0, "maxY": 45772.0, "series": [{"data": [[2.0, 2416.0], [34.0, 19436.5], [37.0, 31439.0], [39.0, 17258.0], [40.0, 10976.0], [42.0, 4655.5], [43.0, 29604.0], [45.0, 30426.5], [44.0, 29070.0], [47.0, 30516.0], [3.0, 6769.0], [53.0, 34595.0], [55.0, 128.0], [57.0, 22040.5], [56.0, 39263.5], [61.0, 5059.0], [66.0, 8625.5], [4.0, 43435.0], [75.0, 20814.0], [77.0, 41704.0], [5.0, 33419.0], [81.0, 39774.0], [87.0, 36656.0], [90.0, 11566.0], [88.0, 35949.0], [93.0, 33536.0], [6.0, 39837.0], [100.0, 294.5], [101.0, 24765.0], [7.0, 2372.0], [112.0, 32859.0], [119.0, 12468.0], [116.0, 31574.0], [118.0, 35885.5], [124.0, 19501.5], [140.0, 5033.0], [138.0, 1310.0], [147.0, 39835.0], [149.0, 36691.0], [9.0, 45772.0], [145.0, 27730.0], [14.0, 22638.5], [15.0, 1939.0], [1.0, 28517.5], [16.0, 38472.0], [18.0, 4621.0], [27.0, 9129.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[138.0, 3581.0], [55.0, 10.0], [7.0, 1128.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 1.0, "maxY": 40459.0, "series": [{"data": [[2.0, 1950.5], [34.0, 18828.0], [37.0, 31150.0], [39.0, 17242.0], [40.0, 10952.0], [42.0, 4512.0], [43.0, 29021.0], [45.0, 29446.0], [44.0, 28970.0], [47.0, 29646.0], [3.0, 6666.0], [53.0, 32711.0], [55.0, 128.0], [57.0, 21650.5], [56.0, 39191.0], [61.0, 4883.0], [66.0, 8249.0], [4.0, 28914.5], [75.0, 20021.0], [77.0, 40286.0], [5.0, 33400.0], [81.0, 39295.0], [87.0, 36576.0], [90.0, 11527.5], [88.0, 28972.5], [93.0, 31954.0], [6.0, 34819.0], [100.0, 294.5], [101.0, 23745.0], [7.0, 2304.0], [112.0, 31626.5], [119.0, 12213.0], [116.0, 31437.5], [118.0, 34828.5], [124.0, 18631.5], [140.0, 4200.0], [138.0, 1310.0], [147.0, 39685.0], [149.0, 34784.0], [9.0, 40459.0], [145.0, 26681.0], [14.0, 21453.0], [15.0, 1533.0], [1.0, 28450.5], [16.0, 32438.0], [18.0, 3791.0], [27.0, 8327.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[138.0, 3581.0], [55.0, 10.0], [7.0, 1128.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 149.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 24.983333333333334, "minX": 1.69868388E12, "maxY": 32.36666666666667, "series": [{"data": [[1.69868394E12, 24.983333333333334], [1.69868388E12, 32.36666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69868394E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.69868388E12, "maxY": 41.333333333333336, "series": [{"data": [[1.69868394E12, 41.333333333333336], [1.69868388E12, 15.583333333333334], [1.698684E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69868388E12, 0.11666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.698684E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.69868388E12, "maxY": 41.333333333333336, "series": [{"data": [[1.69868394E12, 41.333333333333336], [1.69868388E12, 15.583333333333334], [1.698684E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69868388E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.698684E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.69868388E12, "maxY": 41.333333333333336, "series": [{"data": [[1.69868394E12, 41.333333333333336], [1.69868388E12, 15.583333333333334], [1.698684E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69868388E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.698684E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

